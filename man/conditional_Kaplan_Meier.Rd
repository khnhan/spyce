% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conditional_Kaplan_Meier.R
\name{conditional_Kaplan_Meier}
\alias{conditional_Kaplan_Meier}
\title{Compute the conditional Kaplan-Meier function to estimate \eqn{S_{X|Z_c,Z_d}(t|z_c,z_d)}}
\usage{
conditional_Kaplan_Meier(
  t,
  w_data,
  delta_data,
  z_c = NULL,
  z_c_data = NULL,
  z_d = NULL,
  z_d_data = NULL,
  kern
)
}
\arguments{
\item{t}{value of \eqn{t} at which \eqn{S_{X|Z_c,Z_d}(t|z_c,z_d)} is computed.}

\item{w_data}{vector of \eqn{W=min(X,C)} with length \eqn{n}.}

\item{delta_data}{vector of \eqn{\Delta=I(X\le C)} with length \eqn{n}.}

\item{z_c}{value of a continuous random variable \eqn{Z_c} at which \eqn{S_{X|Z_c,Z_d}(t|z_c,z_d)} is computed. Default is \code{NULL}.}

\item{z_c_data}{vector (or matrix) of \eqn{Z_c} with length (or row length) \eqn{n}. Default is \code{NULL}.}

\item{z_d}{value of a discrete random variable \eqn{Z_d} at which \eqn{S_{X|Z_c,Z_d}(t|z_c,z_d)} is computed. Default is \code{NULL}.}

\item{z_d_data}{vector (or matrix) of \eqn{Z_d} with length (or row length) \eqn{n}. \eqn{Z_d} is a discrete random variable. Default is \code{NULL}.}

\item{kern}{kernel function applied to \eqn{Z_c}. In \code{conditional_Kaplan_Meier} function, \code{kern(z_c, z_c_data)} should return a length \eqn{n} vector. See \code{kern_gaussian} in the example below.}
}
\value{
value of \eqn{S_{X|Z_c,Z_d}(t|z_c,z_d)}.
}
\description{
The function \code{conditional_Kaplan_Meier} finds the conditional Kaplan-Meier estimator of conditional survival function \eqn{S_{X|Z_c,Z_d}(t|z_c, z_d)}, where \eqn{Z_c} is a continuous random variable, and \eqn{Z_d} is a discrete random variable. If \code{z_c} and \code{z_c_data} or \code{z_d} and \code{z_d_data} are not specified,
}
\details{
To find \eqn{S_{C|Z_c,Z_d}(t|z_c,z_d)}, apply \code{delta_data = 1-delta_data} beforehand to switch the role of \eqn{X} and \eqn{C}.
}
\examples{
set.seed(11)
x_data = rexp(500)
c_data = rexp(500, rate = 2)
w_data = pmin(x_data, c_data)
delta_data = (x_data <= c_data)
z_c_data = rnorm(500)
z_d_data = rbinom(500, size = 1, prob = 0.3)
kern_gaussian = function(cond, cond_data, h = sd(cond_data)){ #Gaussian kernel
  exp(- 0.5 * apply(as.matrix(cond_data), 1, function(x) sum((cond - x)^2)) / h^2) / (sqrt(2*pi)*h)
}
kern_gaussian(z_c = 1, z_c_data = z_c_data)

conditional_Kaplan_Meier(t = 1, w_data, delta_data,
                         kern = kern_gaussian) #compare with exp(-1) = 0.368

conditional_Kaplan_Meier(t = 1, w_data, delta_data,
                         z_c = 1, z_c_data = z_c_data,
                         kern = kern_gaussian) #compare with exp(-1) = 0.368
conditional_Kaplan_Meier(t = 1, w_data, delta_data,
                         z_d = 0, z_d_data = z_d_data,
                         kern = kern_gaussian) #compare with exp(-1) = 0.368
conditional_Kaplan_Meier(t = 1, w_data, delta_data,
                         z_c = 1, z_c_data = z_c_data, z_d = 0, z_d_data = z_d_data,
                         kern = kern_gaussian) #compare with exp(-1) = 0.368

}
