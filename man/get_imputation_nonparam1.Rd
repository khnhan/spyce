% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_imputation_nonparam1.R
\name{get_imputation_nonparam1}
\alias{get_imputation_nonparam1}
\title{Imputation estimator for (beta, sigma) with nonparametrically estimated \eqn{f_{X\mid Z}}}
\usage{
get_imputation_nonparam1(
  y_data,
  w_data,
  delta_data,
  z_data = NULL,
  surv_c_vals,
  init,
  sigma_fixed = NULL,
  nleqslv_args = list()
)
}
\arguments{
\item{y_data}{Numeric vector.}

\item{w_data}{Numeric vector of \eqn{W=\min(X,C)}.}

\item{delta_data}{Logical or \{0,1\} vector: \eqn{\Delta=1\{X \le C\}}.}

\item{z_data}{Optional numeric vector (default \code{NULL}); if provided, must match length of \code{y_data}.}

\item{surv_c_vals}{Numeric vector, length \code{length(y_data)}: conditional survival \eqn{S_{C\mid Y,Z}(W_i\mid Y_i,Z_i)}
(or \eqn{S_{C\mid Y}(W_i\mid Y_i)} when \code{z_data} is \code{NULL}), evaluated at each observation.}

\item{init}{Numeric vector of free parameters:
\itemize{
\item Case A: \code{c(beta0,beta1,beta2,beta3, sigma)}
\item Case B: \code{c(beta0,beta1, sigma)}
\item Case C: \code{c(beta0,beta1,beta2,beta3)}
\item Case D: \code{c(beta0,beta1)}
}}

\item{sigma_fixed}{Optional positive scalar; if supplied, \eqn{\sigma} is treated as known.}

\item{nleqslv_args}{Named list of extra args passed to \code{nleqslv::nleqslv()}.}
}
\value{
list with \code{$beta_imp_nonparam1}, \code{$sigma_imp_nonparam1}, \code{$root}.
}
\description{
Solves \eqn{\sum_{i=1}^n S_\theta(Y_i,\tilde W_i,\Delta_i,Z_i;\theta)=0}
via \code{nleqslv}, where censored observations (\eqn{\Delta=0}) are handled by
imputing a single \eqn{X}-value inside the score using a kernel-based estimator of
\eqn{E[X \mid X>W, Y, Z]} (or \eqn{E[X \mid X>W, Y]} when \code{z_data} is \code{NULL}).

Supported modes:
\itemize{
\item (A) estimate \eqn{(\beta,\sigma)} with \code{z_data}
\item (B) estimate \eqn{(\beta,\sigma)} without \code{z_data}
\item (C) estimate \eqn{\beta} with \code{z_data} and fixed \code{sigma}
\item (D) estimate \eqn{\beta} without \code{z_data} and fixed \code{sigma}
}
}
\section{Model and nuisance estimation}{

\itemize{
\item With \code{z_data} present, then \eqn{Y\mid X,Z \sim \mathcal{N}\!\big(\beta_0+\beta_1 X+\beta_2 Z+\beta_3 ZX,\ \sigma^2\big)} and \eqn{X\mid Z} is estimated nonparametrically.
\item Without \code{z_data}, then \eqn{Y\mid X \sim \mathcal{N}\!\big(\beta_0+\beta_1 X,\ \sigma^2\big)} and \eqn{X} is estimated nonparametrically.
}
}

\examples{
library(truncnorm)
set.seed(1)
n = 500; beta = c(0, 3); sigma = 4
# Data generation
# Y|X ~ N(beta_0 + beta_1 X, 1)
x_data = rtruncnorm(n, a = -1, b = 1, mean = 0, sd = 1)
y_data = cbind(1,x_data) \%*\% beta + sigma * rnorm(n)
c_data = rtruncnorm(n, a = -1, b = 1, mean = 0, sd = 1)
z_data = rbinom(n, size = 1, prob = 0.6)
# Generate W and Delta from X and C
w_data = pmin(c_data,x_data)
delta_data = as.numeric(x_data<=c_data)
# Compute survival function
kern_gaussian = function(cond, cond_data, h = sd(cond_data)){ #Gaussian kernel
  exp(- 0.5 * apply(as.matrix(cond_data), 1, function(x) sum((cond - x)^2)) / h^2) / (sqrt(2*pi)*h)
}
surv_c_vals = sapply(1:n, function(i){
  conditional_Kaplan_Meier(w_data[i], w_data, 1-delta_data,
                           z_c = y_data[i], z_c_data = y_data,
                           z_d = z_data[i], z_d_data = z_data,
                           kern = kern_gaussian)})
surv_c_vals_nz = sapply(1:n, function(i){
  conditional_Kaplan_Meier(w_data[i], w_data, 1-delta_data,
                           z_c = y_data[i], z_c_data = y_data,
                           kern = kern_gaussian)})
# CASE A: true = (0, 3, 0, 0, 4)
get_imputation_nonparam1(y_data,
                         w_data,
                         delta_data,
                         z_data,
                         surv_c_vals = surv_c_vals,
                         init = c(0.5, 2.5, 0.1, 0.1, 3.5),
                         nleqslv_args = list())
# CASE B: true = (0, 3, 4)
get_imputation_nonparam1(y_data,
                         w_data,
                         delta_data,
                         surv_c_vals = surv_c_vals_nz,
                         init = c(0.5, 2.5, 3.5),
                         nleqslv_args = list())
# CASE C: true = (0, 3, 0, 0)
get_imputation_nonparam1(y_data,
                         w_data,
                         delta_data,
                         z_data,
                         surv_c_vals = surv_c_vals,
                         init = c(0.5, 2.5, 0.1, 0.1),
                         sigma_fixed = 4,
                         nleqslv_args = list())
# CASE D: true = (0, 3)
get_imputation_nonparam1(y_data,
                         w_data,
                         delta_data,
                         surv_c_vals = surv_c_vals_nz,
                         init = c(0.5, 2.5),
                         sigma_fixed = 4,
                         nleqslv_args = list())
}
